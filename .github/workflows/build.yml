name: CMake Build Matrix

on: [push]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
       - {
           name: "Windows Latest MSVC", 
           os: windows-latest,
#            build_type: "Release", cc: "cl", cxx: "cl",
           environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
           artifact: "cwipc_win1064_.zip",
         }
        - {
            name: "Ubuntu Latest GCC", 
            os: ubuntu-latest,
#            build_type: "Release", cc: "gcc", cxx: "g++",
            artifact: "cwipc_ubuntu2004_.tgz",
          }
       - {
#            name: "macOS Latest Clang",
           os: macos-latest,
#            build_type: "Release", cc: "clang", cxx: "clang++",
           artifact: "cwipc_osx1015_",
         }
    steps:
    - name: Install dependencies
      uses: lyricwulf/abc@v1
      with:
        linux: libpcl-dev python3-pip python3-venv libturbojpeg0-dev libusb-dev libglfw3-dev
        macos: pcl python3 homebrew/core/glfw3 jpeg-turbo librealsense
        windows: libpcl
        
    - name: Install dependencies fixup (MacOS)
      if: matrix.config.os == 'macos-latest'
      run: |
        brew unlink jpeg
        brew link --force jpeg-turbo
              
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: See what is there
      shell: bash
      run: |
        pwd
        ls -l

    - name: Build & Test
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{ github.workspace }}/build
#          # will set the CC & CXX for cmake
#          cc: gcc
#          cxx: g++
#          build-type: Release
#          # Extra options pass to cmake while configuring project
#          configure-options: -DCMAKE_C_FLAGS=-w32 -DPNG_INCLUDE=OFF
        run-test: true
#          ctest-options: -R mytest
      # install the build using cmake --install
        install-build: true
#          # run build using '-j [parallel]' to use multiple threads to build
#          parallel: 14