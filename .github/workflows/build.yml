name: CMake Build Matrix

on: [push]

jobs:
    build-windows:
        runs-on: windows-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
                submodules: 'recursive'
                lfs: 'true'
        - name: Install apt/brew/choco dependencies
          uses: lyricwulf/abc@v1
          with:
                linux: curl libpcl-dev python3-pip python3-venv libturbojpeg0-dev libusb-dev libglfw3-dev librealsense2-dkms librealsense2-utils librealsense2-dev libsoundio1 libopencv-dev
                macos: pcl python3 homebrew/core/glfw3 jpeg-turbo librealsense
                windows: glfw3 libjpeg-turbo realsense-sdk2 opencv
        - name: Choco post-install PATH and such (Windows)
          shell: pwsh
          run: |
                Add-Content $env:GITHUB_ENV "JPEG_TURBO_DIR=C:/libjpeg-turbo64"
                Add-Content $env:GITHUB_PATH "C:/libjpeg-turbo64/bin"
                $thirdpartydir="$((Get-Item .).FullName)\3rdparty"
                mkdir $thirdpartydir
        - name: Install K4A (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item 3rdparty).FullName)"
                (New-Object System.Net.WebClient).DownloadFile("https://download.microsoft.com/download/3/d/6/3d6d9e99-a251-4cf3-8c6a-8e108e960b4b/Azure%20Kinect%20SDK%201.4.1.exe","$thirdpartydir/kinect_sdk_141.exe");
                (New-Object System.Net.WebClient).DownloadFile("https://download.microsoft.com/download/9/d/b/9dbe0fbe-c9c3-4228-a64c-1e0a08736ec1/Azure%20Kinect%20Body%20Tracking%20SDK%201.1.1.msi","$thirdpartydir/kinect_bt_sdk_111.msi");
                cd $thirdpartydir
                dir
                icacls "C:\Windows\Temp" /q /c /t /grant Users:F /T
                Start-Process "kinect_sdk_141.exe" -ArgumentList "/install /quiet /norestart /log kinect_sdk_install.txt" -Wait -NoNewWindow
                Start-Process "msiexec" -ArgumentList "kinect_bt_sdk_111.msi /install /quiet /norestart /log kinect_bt_sdk_install.txt" -Wait -NoNewWindow
                dir
                cat kinect_*.txt
                Add-Content $env:GITHUB_PATH "C:/Program Files/Azure Kinect SDK v1.4.1/sdk/windows-desktop/bin"
                Add-Content $env:GITHUB_PATH "C:/Program Files/Azure Kinect Body Tracking SDK/tools"
        - name: Install PCL (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item 3rdparty).FullName)"
                (New-Object System.Net.WebClient).DownloadFile("https://github.com/cwi-dis/cwipc_test/releases/download/pcl-1-12-1-win/PCL-1.12.1-win10-x64-AllInOne.zip","$thirdpartydir/PCL-1.12.1-win10-x64-AllInOne.zip");
                cd $thirdpartydir
                Expand-Archive -Path PCL-1.12.1-win10-x64-AllInOne.zip -DestinationPath PCL-1.12.1
                Add-Content $env:GITHUB_PATH "$thirdpartydir/PCL-1.12.1/bin"
                Add-Content $env:GITHUB_ENV "PCL_DIR=$thirdpartydir/PCL-1.12.1"
        - name: Check installs
          shell: bash
          run: |
                ls -l "/c/Program Files"
                ls -l "/c/Program Files (x86)"
        - name: Build & Test
          uses: ashutoshvarma/action-cmake-build@master
          with:
                build-dir: ${{ github.workspace }}/build
                configure-options: -DJPEG_Turbo_ROOT="$JPEG_TURBO_DIR" -DPCL_ROOT="$PCL_DIR"
                run-test: true
                install-build: true
                install-options: --prefix installed
        - name: upload CTest output in case of failure
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: windows-ctest-output
                path: build/Testing/Temporary/LastTest.log
        - name: Capture build folder as artifact
          if: ${{ failure() }}
          shell: bash
          run: tar cfz build.tgz build
        - name: Upload build folder
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: windows-build-folder
                path: build.tgz
        - name: Capture installed folder as artifact
          shell: bash
          run: tar -c -f cwipc_win1064_.tgz -z -C installed .
        - name: Upload installed folder
          uses: actions/upload-artifact@v3
          with:
                name: cwipc_win1064_
                path: cwipc_win1064_.tgz
                
    build-macos:
        runs-on: macos-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
                submodules: 'recursive'
                lfs: 'true'
        - name: Install apt/brew/choco dependencies
          uses: lyricwulf/abc@v1
          with:
                linux: curl libpcl-dev python3-pip python3-venv libturbojpeg0-dev libusb-dev libglfw3-dev librealsense2-dkms librealsense2-utils librealsense2-dev libsoundio1 libopencv-dev
                macos: pcl python3 homebrew/core/glfw3 jpeg-turbo librealsense
                windows: glfw3 libjpeg-turbo realsense-sdk2 opencv
        - name: Install dependencies fixup (MacOS)
          run: |
                brew unlink jpeg
                brew link --force jpeg-turbo
        - name: Build & Test
          uses: ashutoshvarma/action-cmake-build@master
          with:
                build-dir: ${{ github.workspace }}/build
                configure-options:
                run-test: true
                install-build: true
                install-options: --prefix installed
        - name: upload CTest output in case of failure
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: macos-ctest-output
                path: build/Testing/Temporary/LastTest.log
        - name: Capture build folder as artifact
          if: ${{ failure() }}
          shell: bash
          run: tar cfz build.tgz build
        - name: Upload build folder
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: macos-build-folder
                path: build.tgz
        - name: Capture installed folder as artifact
          shell: bash
          run: tar -c -f cwipc_osx1014_.tgz -z -C installed .
        - name: Upload installed folder
          uses: actions/upload-artifact@v3
          with:
                name: cwipc_osx1014
                path: cwipc_osx1014_.tgz
                
    build-linux:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
                submodules: 'recursive'
                lfs: 'true'
        - name: Pre-install dependencies
          run: |
                sudo apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE
                sudo add-apt-repository -y "deb https://librealsense.intel.com/Debian/apt-repo focal main" -u
                sudo apt-get -y update
        - name: Install apt/brew/choco dependencies
          uses: lyricwulf/abc@v1
          with:
                linux: curl libpcl-dev python3-pip python3-venv libturbojpeg0-dev libusb-dev libglfw3-dev librealsense2-dkms librealsense2-utils librealsense2-dev libsoundio1 libopencv-dev
                macos: pcl python3 homebrew/core/glfw3 jpeg-turbo librealsense
                windows: glfw3 libjpeg-turbo realsense-sdk2 opencv
        - name: Install K4A
          run: |
                curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/libk/libk4a1.3/libk4a1.3_1.3.0_amd64.deb > /tmp/libk4a1.3_1.3.0_amd64.deb
                curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/libk/libk4a1.3-dev/libk4a1.3-dev_1.3.0_amd64.deb > /tmp/libk4a1.3-dev_1.3.0_amd64.deb
                curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/libk/libk4abt1.0/libk4abt1.0_1.0.0_amd64.deb > /tmp/libk4abt1.0_1.0.0_amd64.deb
                curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/libk/libk4abt1.0-dev/libk4abt1.0-dev_1.0.0_amd64.deb > /tmp/libk4abt1.0-dev_1.0.0_amd64.deb
                curl -sSL https://packages.microsoft.com/ubuntu/18.04/prod/pool/main/k/k4a-tools/k4a-tools_1.3.0_amd64.deb > /tmp/k4a-tools_1.3.0_amd64.deb
                echo 'libk4a1.3 libk4a1.3/accepted-eula-hash string 0f5d5c5de396e4fee4c0753a21fee0c1ed726cf0316204edda484f08cb266d76' | sudo debconf-set-selections
                echo 'libk4abt1.0	libk4abt1.0/accepted-eula-hash	string	03a13b63730639eeb6626d24fd45cf25131ee8e8e0df3f1b63f552269b176e38' | sudo debconf-set-selections
                sudo dpkg -i /tmp/libk4a1.3_1.3.0_amd64.deb
                sudo dpkg -i /tmp/libk4a1.3-dev_1.3.0_amd64.deb
                sudo dpkg -i /tmp/libk4abt1.0_1.0.0_amd64.deb
                sudo dpkg -i /tmp/libk4abt1.0-dev_1.0.0_amd64.deb
                sudo dpkg -i /tmp/k4a-tools_1.3.0_amd64.deb      
        - name: Build & Test
          uses: ashutoshvarma/action-cmake-build@master
          with:
                build-dir: ${{ github.workspace }}/build
                configure-options:
                run-test: true
                install-build: true
                install-options: --prefix installed
        - name: upload CTest output in case of failure
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: linux-ctest-output
                path: build/Testing/Temporary/LastTest.log
        - name: Capture build folder as artifact
          if: ${{ failure() }}
          shell: bash
          run: tar cfz build.tgz build
        - name: Upload build folder
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: linux-build-folder
                path: build.tgz
        - name: Capture installed folder as artifact
          shell: bash
          run: tar -c -f cwipc_ubuntu2004_.tgz -z -C installed .
        - name: Upload installed folder
          uses: actions/upload-artifact@v3
          with:
                name: cwipc_ubuntu2004_
                path: cwipc_ubuntu2004_.tgz
               
#  build:
#    name: ${{ matrix.config.name }}
#    runs-on: ${{ matrix.config.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        config:
#         - {
#           name: "Windows Latest MSVC", 
#           os: windows-latest,
#           arch: x64,
#           triplet: x64-windows,
##            build_type: "Release", cc: "cl", cxx: "cl",
#           environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
#           artifact: "cwipc_win1064_.zip",
#         }
##         - {
##            name: "Ubuntu Latest GCC", 
##            os: ubuntu-latest,
##            arch: x64,
##            triplet: x64-linux,
###            build_type: "Release", cc: "gcc", cxx: "g++",
##            artifact: "cwipc_ubuntu2004_.tgz",
##          }
##         - {
##           name: "macOS Latest Clang",
##           os: macos-latest,
##           arch: x64,
##           triplet: x64-osx,
###            build_type: "Release", cc: "clang", cxx: "clang++",
##           artifact: "cwipc_osx1015_",
##         }

