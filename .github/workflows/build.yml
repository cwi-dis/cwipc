name: CMake Build Matrix

on: [push]

jobs:
    build-windows:
        runs-on: windows-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
                submodules: 'recursive'
                lfs: 'true'
        - name: Pre-install (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..).FullName)\3rdparty"
                mkdir $thirdpartydir
        - name: Install realsense SDK
          shell: pwsh
          run: |
                choco install -y realsense-sdk2
                Add-Content $env:GITHUB_PATH "C:\Program Files (x86)\Intel RealSense SDK 2.0\bin\x64"

        - name: Install opencv (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..\3rdparty).FullName)"
                $installer="$thirdpartydir\opencv-installer.exe"
                (New-Object System.Net.WebClient).DownloadFile("https://github.com/opencv/opencv/releases/download/4.5.5/opencv-4.5.5-vc14_vc15.exe","$installer");
                Start-Process "$installer" -ArgumentList '-o"C:\" -y' -Wait
                Add-Content $env:GITHUB_PATH "C:/opencv/build/bin"

        - name: Install libturbojpeg (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..\3rdparty).FullName)"
                $installer="$thirdpartydir\jpegturbo-installer.exe"
                (New-Object System.Net.WebClient).DownloadFile("https://sourceforge.net/projects/libjpeg-turbo/files/2.1.3/libjpeg-turbo-2.1.3-vc64.exe","$installer");
                Start-Process "$installer" -ArgumentList "/S" -Wait
                Add-Content $env:GITHUB_PATH "C:/libjpeg-turbo64/bin"

        - name: Install K4A (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..\3rdparty).FullName)"
                $installer="$thirdpartydir\k4a-installer.exe"
                (New-Object System.Net.WebClient).DownloadFile("https://download.microsoft.com/download/3/d/6/3d6d9e99-a251-4cf3-8c6a-8e108e960b4b/Azure%20Kinect%20SDK%201.4.1.exe","$installer");
                Start-Process "$installer" -ArgumentList "/S" -Wait
                Add-Content $env:GITHUB_PATH "C:/Program Files/Azure Kinect SDK v1.4.1/sdk/windows-desktop/amd64/release/bin"
                
        - name: Install K4ABT (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..\3rdparty).FullName)"
                $msifile="$thirdpartydir\k4abt-installer.msi"
                (New-Object System.Net.WebClient).DownloadFile("https://download.microsoft.com/download/9/d/b/9dbe0fbe-c9c3-4228-a64c-1e0a08736ec1/Azure%20Kinect%20Body%20Tracking%20SDK%201.1.1.msi","$msifile");
                Start-Process "$msifile" -ArgumentList '/quiet /passive' -Wait
                Add-Content $env:GITHUB_PATH "C:/Program Files/Azure Kinect Body Tracking SDK/tools"
        - name: Install PCL (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..\3rdparty).FullName)"
                $installer="$thirdpartydir/pcl-installer.exe"
                (New-Object System.Net.WebClient).DownloadFile("https://github.com/PointCloudLibrary/pcl/releases/download/pcl-1.11.1/PCL-1.11.1-AllInOne-msvc2019-win64.exe","$installer");
                & "$installer" /S
                Start-Sleep -s 120
                Add-Content $env:GITHUB_PATH "C:/Program Files/PCL 1.11.1/bin"
                Add-Content $env:GITHUB_PATH "C:/Program Files/PCL 1.11.1/3rdparty/VTK/bin"
                Add-Content $env:GITHUB_PATH "C:/Program Files/OpenNI2/redist"
        - name: Install OpenCV (Windows)
          shell: pwsh
          run: |
                choco install opencv
                Add-Content $env:GITHUB_PATH "C:/tools/opencv/build/x64/vc15/bin"
                Add-Content $env:GITHUB_ENV "OPENCV_DIR=C:/tools/opencv/build"
        - name: Install Python packages (Windows)
          shell: bash
          run: |
                ./scripts/install-3rdparty-win1064.sh
                pythonExecutable=`which python`
                pythonRoot=`python -c "import sys ; print(sys.prefix)"`
                pythonExecutable=`cygpath --windows "$pythonExecutable"`
                echo "Python_ROOT_DIR=$pythonRoot" >> $GITHUB_ENV
                echo "Python3_EXECUTABLE=$pythonExecutable" >> $GITHUB_ENV
        - name: Build & Test
          uses: ashutoshvarma/action-cmake-build@master
          with:
                build-dir: ${{ github.workspace }}/build
                configure-options: -Wno-dev -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/installed -DPython3_EXECUTABLE=${{ env.Python3_EXECUTABLE }} -DOpenCV_ROOT=${{ env.OPENCV_DIR }}
                build-type: Release
                run-test: true
                install-build: true
        - name: upload CTest output in case of failure
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: windows-ctest-output
                path: build/Testing/Temporary/LastTest.log
        - name: Capture build folder as artifact
          if: ${{ failure() }}
          shell: bash
          run: tar cfz build.tgz build
        - name: Upload build folder
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: windows-build-folder
                path: build.tgz
        - name: Capture installed folder as artifact
          shell: bash
          run: |
                tar -c -v -f cwipc_win1064_${{ github.ref_name }}.tgz -z -C installed .
                ls -l
        - name: Upload installed folder
          uses: actions/upload-artifact@v3
          with:
                name: cwipc_win1064_${{ github.ref_name }}
                path: cwipc_win1064_${{ github.ref_name }}.tgz
        - name: Check what was created and installed
          if: always()
          shell: bash
          run: |
                ls -l /c
                ls -l /c/tools
                ls -l "/c/Program Files"
                ls -l "/c/Program Files (x86)"
                ls -l
                ls -l ..
                
    build-macos:
        runs-on: macos-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
                submodules: 'recursive'
                lfs: 'true'
        - name: Install dependencies
          shell: bash
          run: ./scripts/install-3rdparty-osx1015.sh
        - name: Build & Test
          uses: ashutoshvarma/action-cmake-build@master
          with:
                build-dir: ${{ github.workspace }}/build
                configure-options: -Wno-dev 
                run-test: true
                install-build: true
                install-options: --prefix ${{ github.workspace }}/installed
        - name: upload CTest output in case of failure
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: macos-ctest-output
                path: build/Testing/Temporary/LastTest.log
        - name: Capture build folder as artifact
          if: ${{ failure() }}
          shell: bash
          run: tar cfz build.tgz build
        - name: Upload build folder
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: macos-build-folder
                path: build.tgz
        - name: Capture installed folder as artifact
          shell: bash
          run: |
                tar -c -v -f cwipc_osx1014_${{ github.ref_name }}.tgz -z -C installed .
                ls -l
        - name: Upload installed folder
          uses: actions/upload-artifact@v3
          with:
                name: cwipc_osx1014_${{ github.ref_name }}
                path: cwipc_osx1014_${{ github.ref_name }}.tgz
                
    build-linux:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
                submodules: 'recursive'
                lfs: 'true'
        - name: Install dependencies
          shell: bash
          run: ./scripts/install-3rdparty-ubuntu2004.sh  
        - name: Build & Test
          uses: ashutoshvarma/action-cmake-build@master
          with:
                build-dir: ${{ github.workspace }}/build
                configure-options: -Wno-dev 
                run-test: true
                install-build: true
                install-options: --prefix ${{ github.workspace }}/installed
        - name: upload CTest output in case of failure
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: linux-ctest-output
                path: build/Testing/Temporary/LastTest.log
        - name: Capture build folder as artifact
          if: ${{ failure() }}
          shell: bash
          run: tar cfz build.tgz build
        - name: Upload build folder
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: linux-build-folder
                path: build.tgz
        - name: Capture installed folder as artifact
          shell: bash
          run: |
                tar -c -v -f cwipc_ubuntu2004_${{ github.ref_name }}.tgz -z -C installed .
                ls -l
        - name: Upload installed folder
          uses: actions/upload-artifact@v3
          with:
                name: cwipc_ubuntu2004_${{ github.ref_name }}
                path: cwipc_ubuntu2004_${{ github.ref_name }}.tgz
               
#  build:
#    name: ${{ matrix.config.name }}
#    runs-on: ${{ matrix.config.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        config:
#         - {
#           name: "Windows Latest MSVC", 
#           os: windows-latest,
#           arch: x64,
#           triplet: x64-windows,
##            build_type: "Release", cc: "cl", cxx: "cl",
#           environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
#           artifact: "cwipc_win1064_.zip",
#         }
##         - {
##            name: "Ubuntu Latest GCC", 
##            os: ubuntu-latest,
##            arch: x64,
##            triplet: x64-linux,
###            build_type: "Release", cc: "gcc", cxx: "g++",
##            artifact: "cwipc_ubuntu2004_.tgz",
##          }
##         - {
##           name: "macOS Latest Clang",
##           os: macos-latest,
##           arch: x64,
##           triplet: x64-osx,
###            build_type: "Release", cc: "clang", cxx: "clang++",
##           artifact: "cwipc_osx1015_",
##         }

