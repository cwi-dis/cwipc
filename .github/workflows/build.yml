name: CMake Build Matrix

on: [push]

jobs:
    build-windows:
        runs-on: windows-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
                submodules: 'recursive'
                lfs: 'true'
        - name: Install apt/brew/choco dependencies
          uses: lyricwulf/abc@v1
          with:
                linux: curl libpcl-dev python3-pip python3-venv libturbojpeg0-dev libusb-dev libglfw3-dev librealsense2-dkms librealsense2-utils librealsense2-dev libsoundio1 libopencv-dev
                macos: pcl python3 homebrew/core/glfw3 jpeg-turbo librealsense
                windows: glfw3 realsense-sdk2 opencv
        - name: Pre-install (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..).FullName)\3rdparty"
                mkdir $thirdpartydir
        - name: Install libturbojpeg (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..\3rdparty).FullName)"
                (New-Object System.Net.WebClient).DownloadFile("https://sourceforge.net/projects/libjpeg-turbo/files/2.1.3/libjpeg-turbo-2.1.3-vc64.exe","$thirdpartydir/libjpeg-turbo-2.1.3-vc64.exe");
                cd $thirdpartydir
                .\libjpeg-turbo-2.1.3-vc64.exe /S
                Add-Content $env:GITHUB_ENV "JPEG_TURBO_DIR=C:/libjpeg-turbo64"
                Add-Content $env:GITHUB_PATH "C:/libjpeg-turbo64/bin"
        - name: Install K4A (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..\3rdparty).FullName)"
                (New-Object System.Net.WebClient).DownloadFile("https://github.com/cwi-dis/cwipc_test/releases/download/kinect_sdk_141/kinect_sdk_141.zip","$thirdpartydir/kinect_sdk_141.zip");
                (New-Object System.Net.WebClient).DownloadFile("https://github.com/cwi-dis/cwipc_test/releases/download/kinect_bt_sdk_111/kinect_bt_sdk_111.zip","$thirdpartydir/kinect_bt_sdk_111.zip");
                cd $thirdpartydir
                Expand-Archive -Path kinect_sdk_141.zip -DestinationPath $thirdpartydir
                Expand-Archive -Path kinect_bt_sdk_111.zip -DestinationPath $thirdpartydir
                Add-Content $env:GITHUB_PATH "$thirdpartydir/kinect_sdk_141/sdk/windows-desktop/amd64/bin"
                Add-Content $env:GITHUB_PATH "$thirdpartydir/kinect_bt_sdk_111/tools"
                Add-Content $env:GITHUB_ENV "K4A_DIR=$thirdpartydir/kinect_sdk_141"
                Add-Content $env:GITHUB_ENV "K4ABT_DIR=$thirdpartydir/kinect_bt_sdk_111"
        - name: Install PCL (Windows)
          shell: pwsh
          run: |
                $thirdpartydir="$((Get-Item ..\3rdparty).FullName)"
                (New-Object System.Net.WebClient).DownloadFile("https://github.com/cwi-dis/cwipc_test/releases/download/pcl-1-12-1-win/PCL-1.12.1-win10-x64-AllInOne.zip","$thirdpartydir/PCL-1.12.1-win10-x64-AllInOne.zip");
                cd $thirdpartydir
                Expand-Archive -Path PCL-1.12.1-win10-x64-AllInOne.zip -DestinationPath $thirdpartydir
                Add-Content $env:GITHUB_PATH "$thirdpartydir/PCL 1.12.1/bin"
                Add-Content $env:GITHUB_PATH "$thirdpartydir/PCL 1.12.1/3rdparty/VTK/bin"
                Add-Content $env:GITHUB_PATH "C:/Program Files/OpenNI2/redist"
                Add-Content $env:GITHUB_ENV "PCL_DIR=$thirdpartydir"
        - name: Install OpenCV (Windows)
          shell: pwsh
          run: |
                choco install opencv
                Add-Content $env:GITHUB_PATH "C:/tools/opencv/build/x64/vc15/bin"
                Add-Content $env:GITHUB_ENV "OPENCV_DIR=C:/tools/opencv/build"
        - name: Install Python packages (Windows)
          shell: bash
          run: |
                ./scripts/install-3rdparty-win1064.sh
                pythonExecutable=`which python`
                pythonRoot=`python -c "import sys ; print(sys.prefix)"`
                pythonExecutable=`cygpath --windows "$pythonExecutable"`
                echo "Python_ROOT_DIR=$pythonRoot" >> $GITHUB_ENV
                echo "Python3_EXECUTABLE=$pythonExecutable" >> $GITHUB_ENV
        - name: Check what is installed
          shell: bash
          run: |
                du /c/tools
        - name: Build & Test
          uses: ashutoshvarma/action-cmake-build@master
          with:
                build-dir: ${{ github.workspace }}/build
                configure-options: -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/installed -DPython3_EXECUTABLE=${{ env.Python3_EXECUTABLE }} -Dlibjpeg_turbo_ROOT=${{ env.JPEG_TURBO_DIR }} -DPCL_ROOT=${{ env.PCL_DIR }} -Dk4a_ROOT=${{ env.K4A_DIR }} -Dk4abt_ROOT=${{ env.K4ABT_DIR }} -DOpenCV_ROOT=${{ env.OPENCV_DIR }}
                build-type: Release
                run-test: false
                install-build: true
        - name: upload CTest output in case of failure
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: windows-ctest-output
                path: build/Testing/Temporary/LastTest.log
        - name: Capture build folder as artifact
          if: ${{ failure() }}
          shell: bash
          run: tar cfz build.tgz build
        - name: Upload build folder
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: windows-build-folder
                path: build.tgz
        - name: Check that DLLs load
          shell: bash
          run: |
                cd build/bin/Release
                ../../venv/python ../../../cwipc_ytil/python/cwipc_find_dll_problems.py
        - name: Capture installed folder as artifact
          shell: bash
          run: |
                tar -c -v -f cwipc_win1064_$GITHUB_REF_NAME.tgz -z -C installed .
                ls -l
        - name: Upload installed folder
          uses: actions/upload-artifact@v3
          with:
                name: cwipc_win1064_${{ env.GITHUB_REF_NAME }}
                path: cwipc_win1064_${{ env.GITHUB_REF_NAME }}.tgz
                
    build-macos:
        runs-on: macos-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
                submodules: 'recursive'
                lfs: 'true'
        - name: Install dependencies
          shell: bash
          run: ./scripts/install-3rdparty-osx1015.sh
        - name: Build & Test
          uses: ashutoshvarma/action-cmake-build@master
          with:
                build-dir: ${{ github.workspace }}/build
                configure-options:
                run-test: true
                install-build: true
                install-options: --prefix ${{ github.workspace }}/installed
        - name: upload CTest output in case of failure
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: macos-ctest-output
                path: build/Testing/Temporary/LastTest.log
        - name: Capture build folder as artifact
          if: ${{ failure() }}
          shell: bash
          run: tar cfz build.tgz build
        - name: Upload build folder
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: macos-build-folder
                path: build.tgz
        - name: Capture installed folder as artifact
          shell: bash
          run: |
                tar -c -v -f cwipc_osx1014_$GITHUB_REF_NAME.tgz -z -C installed .
                ls -l
        - name: Upload installed folder
          uses: actions/upload-artifact@v3
          with:
                name: cwipc_osx1014_${{ env.GITHUB_REF_NAME }}
                path: cwipc_osx1014_${{ env.GITHUB_REF_NAME }}.tgz
                
    build-linux:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
                submodules: 'recursive'
                lfs: 'true'
        - name: Install dependencies
          shell: bash
          run: ./scripts/install-3rdparty-ubuntu2004.sh  
        - name: Build & Test
          uses: ashutoshvarma/action-cmake-build@master
          with:
                build-dir: ${{ github.workspace }}/build
                configure-options:
                run-test: true
                install-build: true
                install-options: --prefix ${{ github.workspace }}/installed
        - name: upload CTest output in case of failure
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: linux-ctest-output
                path: build/Testing/Temporary/LastTest.log
        - name: Capture build folder as artifact
          if: ${{ failure() }}
          shell: bash
          run: tar cfz build.tgz build
        - name: Upload build folder
          if: ${{ failure() }}
          uses: actions/upload-artifact@v3
          with:
                name: linux-build-folder
                path: build.tgz
        - name: Capture installed folder as artifact
          shell: bash
          run: |
                tar -c -v -f cwipc_ubuntu2004_$GITHUB_REF_NAME.tgz -z -C installed .
                ls -l
        - name: Upload installed folder
          uses: actions/upload-artifact@v3
          with:
                name: cwipc_ubuntu2004_${{ env.GITHUB_REF_NAME }}
                path: cwipc_ubuntu2004_${{ env.GITHUB_REF_NAME }}.tgz
               
#  build:
#    name: ${{ matrix.config.name }}
#    runs-on: ${{ matrix.config.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        config:
#         - {
#           name: "Windows Latest MSVC", 
#           os: windows-latest,
#           arch: x64,
#           triplet: x64-windows,
##            build_type: "Release", cc: "cl", cxx: "cl",
#           environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
#           artifact: "cwipc_win1064_.zip",
#         }
##         - {
##            name: "Ubuntu Latest GCC", 
##            os: ubuntu-latest,
##            arch: x64,
##            triplet: x64-linux,
###            build_type: "Release", cc: "gcc", cxx: "g++",
##            artifact: "cwipc_ubuntu2004_.tgz",
##          }
##         - {
##           name: "macOS Latest Clang",
##           os: macos-latest,
##           arch: x64,
##           triplet: x64-osx,
###            build_type: "Release", cc: "clang", cxx: "clang++",
##           artifact: "cwipc_osx1015_",
##         }

